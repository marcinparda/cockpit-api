services:
  cockpit_db:
    image: postgres:15-alpine
    container_name: cockpit_db
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - cockpit_postgres_data:/var/lib/postgresql/data
    networks:
      - cockpit_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  cockpit_api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: cockpit_api
    env_file:
      - .env
    environment:
      - DB_HOST=cockpit_db
    volumes:
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    ports:
      - "8000:8000"
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      cockpit_db:
        condition: service_healthy
    networks:
      - cockpit_network
    # TODO: add develop section to rebuild

networks:
  cockpit_network:
    driver: bridge

volumes:
  cockpit_postgres_data:
